{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Template A modern Python package template that helps you quickly bootstrap new Python projects with best practices and common tools already set up. Built with Copier , this template provides a standardized foundation for your Python projects. Why Use This Template ? Starting a new Python project involves many repetitive setup tasks. This template helps you: Save time by avoiding manual project setup Ensure consistency across your projects Follow Python best practices from the start Focus on writing code instead of configuration Features Poetry - Modern dependency management and packaging Task - A task runner to simplify common operations MkDocs - Documentation generation with Markdown Linters: Ruff - An extremely fast Python linter and code formatter yamllint - YAML files linter commitizen - Commit message checker and changelog generator Tests: pytest - Powerful and flexible testing framework And many more... Prerequisites Python 3.9 or higher A Git repository Task (not mandatory but recommended) Example Project You can see what a project looks like once generated with this template in the following example . This repository serves as a reference for the output of the template generation and is also used to test updates and improvements.","title":"Python Template"},{"location":"#python-template","text":"A modern Python package template that helps you quickly bootstrap new Python projects with best practices and common tools already set up. Built with Copier , this template provides a standardized foundation for your Python projects.","title":"Python Template"},{"location":"#why-use-this-template","text":"Starting a new Python project involves many repetitive setup tasks. This template helps you: Save time by avoiding manual project setup Ensure consistency across your projects Follow Python best practices from the start Focus on writing code instead of configuration","title":"Why Use This Template ?"},{"location":"#features","text":"Poetry - Modern dependency management and packaging Task - A task runner to simplify common operations MkDocs - Documentation generation with Markdown Linters: Ruff - An extremely fast Python linter and code formatter yamllint - YAML files linter commitizen - Commit message checker and changelog generator Tests: pytest - Powerful and flexible testing framework And many more...","title":"Features"},{"location":"#prerequisites","text":"Python 3.9 or higher A Git repository Task (not mandatory but recommended)","title":"Prerequisites"},{"location":"#example-project","text":"You can see what a project looks like once generated with this template in the following example . This repository serves as a reference for the output of the template generation and is also used to test updates and improvements.","title":"Example Project"},{"location":"getting-started/","text":"Getting Started This guide will help you create and set up a new Python project using the template. Creating a New Project Ensure you have Copier installed: python -m venv .copier_venv source .copier_venv/bin/activate pip install copier Generate your project: copier copy gh:pa-decarvalho/python-template path/to/your/git/repo Delete the virtualenv rm -rf .copier_venv Updating Your Project Once your project is initialized and pushed to a repository, you can update it using Task commands: # Update your project with the latest template changes task copier:update # Update your project while keeping your current answers as defaults task copier:update-defaults The copier:update command will pull the latest changes from the template and allow you to update your answers to the template questions. The copier:update-defaults command will do the same but use your previous answers as default values, making it easier to update while maintaining your current configuration.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This guide will help you create and set up a new Python project using the template.","title":"Getting Started"},{"location":"getting-started/#creating-a-new-project","text":"Ensure you have Copier installed: python -m venv .copier_venv source .copier_venv/bin/activate pip install copier Generate your project: copier copy gh:pa-decarvalho/python-template path/to/your/git/repo Delete the virtualenv rm -rf .copier_venv","title":"Creating a New Project"},{"location":"getting-started/#updating-your-project","text":"Once your project is initialized and pushed to a repository, you can update it using Task commands: # Update your project with the latest template changes task copier:update # Update your project while keeping your current answers as defaults task copier:update-defaults The copier:update command will pull the latest changes from the template and allow you to update your answers to the template questions. The copier:update-defaults command will do the same but use your previous answers as default values, making it easier to update while maintaining your current configuration.","title":"Updating Your Project"},{"location":"mkdocs/","text":"MkDocs Usage Building the Documentation To build the documentation, use the following command: task mkdocs:build Serving the Documentation Locally To preview the documentation locally, run: task mkdocs:serve README.md file The README.md file from the project root is automatically copied to the docs directory as index.md when using either of the commands above. Therefore, you do not need to manually create or include this file, as it will be ignored in the docs folder.","title":"MkDocs Usage"},{"location":"mkdocs/#mkdocs-usage","text":"","title":"MkDocs Usage"},{"location":"mkdocs/#building-the-documentation","text":"To build the documentation, use the following command: task mkdocs:build","title":"Building the Documentation"},{"location":"mkdocs/#serving-the-documentation-locally","text":"To preview the documentation locally, run: task mkdocs:serve","title":"Serving the Documentation Locally"},{"location":"mkdocs/#readmemd-file","text":"The README.md file from the project root is automatically copied to the docs directory as index.md when using either of the commands above. Therefore, you do not need to manually create or include this file, as it will be ignored in the docs folder.","title":"README.md file"}]}